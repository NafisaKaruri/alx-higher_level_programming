The ``101-lazy_matrix_mul`` module
==============================

Using ``lazy_matrix_mul``
-------------------------

This is a file in reStructuredText format.
``lazy_matrix_mul`` from the ``101-lazy_matrix_mul`` module:

    >>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

Basic:

    >>> m_a = [[1, 2], [3, 4]]
    >>> m_b = [[5, 6], [7, 8]]
    >>> lazy_matrix_mul(m_a, m_b)
    array([[19, 22],
           [43, 50]])

Test with non-square matrices:

    >>> m_a = [[1, 2, 3], [4, 5, 6]]
    >>> m_b = [[7, 8], [9, 10], [11, 12]]
    >>> lazy_matrix_mul(m_a, m_b)
    array([[ 58,  64],
           [139, 154]])

Test with zero matrices:

    >>> m_a = [[0, 0], [0, 0]]
    >>> m_b = [[1, 2], [3, 4]]
    >>> lazy_matrix_mul(m_a, m_b)
    array([[0, 0],
           [0, 0]])

Test with None:

    >>> lazy_matrix_mul(None, None)
    Traceback (most recent call last):
    ...
    TypeError: Object arrays are not currently supported

Test with None and a matrix:

    >>> lazy_matrix_mul([[1, 2]], None)
    Traceback (most recent call last):
    ...
    TypeError: Object arrays are not currently supported

Test with a tuple and floats:

    >>> lazy_matrix_mul((1, 3, 5), [[1.3], [5.2], [7.7]])
    array([55.4])

Test with a string:

    >>> lazy_matrix_mul([[1, 2]], "smiley")
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

Test with a list of strings:

    >>> lazy_matrix_mul([[1, 2]], ["smiley"])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,2) and (1,) not aligned: 2 (dim 1) != 1 (dim 0)

Test with empty matrix:

    >>> lazy_matrix_mul([], [[1]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (0,) and (1,1) not aligned: 0 (dim 0) != 1 (dim 0)

Test with matrix with a list of strings:

    >>> lazy_matrix_mul([[2, 4, 6], [3, 6, 9]], [[1], ['2'], [3]])
    Traceback (most recent call last):
    	      ...
    TypeError: invalid data type for einsum

Test with matrix with an empty list:

    >>> lazy_matrix_mul([[12, 12, 12], [], [14, 14, 14]], [[2], [3], [8]])
    Traceback (most recent call last):
    	      ...
    ValueError: setting an array element with a sequence.

Test with matrix which its rows have different size:

    >>> lazy_matrix_mul([[2, 2, 2], [4, 4, 4]], [[2], [3, 3]])
    Traceback (most recent call last):
    	      ...
    ValueError: setting an array element with a sequence.

Test with two matrix that can't be multiplied:

    >>> lazy_matrix_mul([[5, 2, 3], [7, 13, 2], [1, 0, 3]], [[2, 3], [6, 9]])
    Traceback (most recent call last):
    	      ...
    ValueError: shapes (3,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

Missing one argument:

    >>> lazy_matrix_mul([[1, 2]])
    Traceback (most recent call last):
    	            ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Missing arguments:

    >>> lazy_matrix_mul()
    Traceback (most recent call last):
    	            ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
